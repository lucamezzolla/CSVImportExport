package csvimportexport;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author luca.mezzolla
 */
public class Frame extends javax.swing.JFrame implements SetSeparator, ApplyFiltersInterface {

    private static final long serialVersionUID = -6167611413304733784L;
    private String separator = "";
    
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        exportInWordButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        removeColumnsButton = new javax.swing.JButton();
        filtersButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CSV Import Export");

        exportInWordButton.setText("Export in .docx");
        exportInWordButton.setEnabled(false);
        exportInWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportInWordButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setAutoscrolls(false);
        table.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(table);

        removeColumnsButton.setText("Remove Columns");
        removeColumnsButton.setEnabled(false);
        removeColumnsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColumnsButtonActionPerformed(evt);
            }
        });

        filtersButton.setText("Filters");
        filtersButton.setEnabled(false);
        filtersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtersButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        newMenuItem.setText("New");
        newMenuItem.setEnabled(false);
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeColumnsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtersButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportInWordButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportInWordButton)
                    .addComponent(removeColumnsButton)
                    .addComponent(filtersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        GetSeparatorFrame gsf = new GetSeparatorFrame();
        gsf.setLocationRelativeTo(this);
        gsf.setListener(this);
        gsf.setVisible(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void chooseFile() {
        JFileChooser chooser=new JFileChooser();
        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String fName = f.getName().toUpperCase();
                if (fName.endsWith(".CSV") || f.isDirectory()) {
                    return true;
                } else {
                    return false;   
                }
            }
            public String getDescription() {
                return "CSV File (*.csv)";
            }
        });
        chooser.showOpenDialog(null);       
        if(chooser.getSelectedFile() != null) {
            String path = chooser.getSelectedFile().getAbsolutePath();
            CsvReader csvReader = new CsvReader();
            csvReader.loadCsvInTable(path, separator, table);
            //item and buttons enabled
            newMenuItem.setEnabled(true); //NEW
            openMenuItem.setEnabled(false); //OPEN
            filtersButton.setEnabled(true);
            removeColumnsButton.setEnabled(true);
            exportInWordButton.setEnabled(true);
        }
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void exportInWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportInWordButtonActionPerformed
            //
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Date date = new Date();
            SimpleDateFormat format = new SimpleDateFormat("yyyyymmddhhmmss");
            String formattedDate = format.format(date);
            //
            new WordWriter().writeTableToWord(table, formattedDate+".docx");
            //
            setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(null, "Done!");
    }//GEN-LAST:event_exportInWordButtonActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        dispose();
        MainClass.run();
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void removeColumnsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColumnsButtonActionPerformed
        RemoveColumnFrame rcf = new RemoveColumnFrame(table);
        rcf.setLocationRelativeTo(this);
        rcf.setVisible(true);
        rcf.buildUI();
    }//GEN-LAST:event_removeColumnsButtonActionPerformed

    private void filtersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtersButtonActionPerformed
        try {
            FiltersFrame filtersFrame = new FiltersFrame();
            filtersFrame.setListener(this);
            filtersFrame.setProp();
            filtersFrame.setLocationRelativeTo(null);
            filtersFrame.setVisible(true);
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_filtersButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton exportInWordButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton filtersButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton removeColumnsButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setSeparator(String text) {
        separator = text;
        chooseFile();
    }

    @Override
    public void applyFilters(JList list) {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int countRow = table.getRowCount();
        int countCol = table.getColumnCount();
        DefaultListModel model = (DefaultListModel) list.getModel();
        Map<String, String> array = new HashMap<>();
        for(int i = 0; i < model.getSize(); i++) {
            String foo = (String) model.get(i);
            String[] fooSplit = foo.split("=");
            String key = fooSplit[0];
            String value = fooSplit[1];
            array.put(key, value);
        }
        for(int i = 0; i < countRow; i++) {
            for(int j = 0; j < countCol; j++) {
                String valueAt = (String) table.getValueAt(i, j);
                if(array.containsKey(valueAt)) {
                    table.setValueAt(array.get(valueAt), i, j);
                }
            }
        }
        setCursor(Cursor.getDefaultCursor());
    }

}